AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Domain:
    Description: Domain name that we will get a certificate for and associate with an API Gateway
    Type: String
    MinLength: "1"

  TableName:
    Description: DynamoDB table name
    Type: String
    MinLength: "1"
    Default: "Auth"

  HostedZoneId:
    Description: Hosted Zone ID of the domain, for certificate verification and for API Gateway records
    Type: String
    MinLength: "1"

  ReservedConcurrency:
    Description: Max number of Lambdas that can run at the same time, if -1 use unreserved concurrency
    Type: Number
    Default: -1

  ThrottlingRateLimit:
    Description: Max number of HTTP requests to allow per second over the long term
    Type: Number
    Default: 50

  ThrottlingBurstLimit:
    Description: Max number of HTTP requests to allow per second for a short burst
    Type: Number
    Default: 200

  Layers:
    Description: A space separated list of Layer ARNs including version
    Type: String
    Default: ""


Resources:
  HttpLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: serve/adapter/lambda_function/stack-lambda.yml
      Parameters:
        Layers: !Ref Layers
        ReservedConcurrency: !Ref ReservedConcurrency
        EncodedEnvironment: !Sub 'KVSTORE_DYNAMODB_TABLE_NAME|${DynamoTable}'

  CertificateStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        Domain: !Ref Domain
        HostedZoneId: !Ref HostedZoneId
      TemplateURL: serve/adapter/lambda_function/stack-certificate.yml

  ApiGatewayStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        LambdaArn: !GetAtt HttpLambdaStack.Outputs.HttpLambdaArn
        ThrottlingRateLimit: !Ref ThrottlingRateLimit
        ThrottlingBurstLimit: !Ref ThrottlingBurstLimit
      TemplateURL: serve/adapter/lambda_function/stack-api-gateway.yml

  ApiGatewayDomainStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        CertificateArn: !GetAtt CertificateStack.Outputs.CertificateArn
        Domain: !Ref Domain
        HostedZoneId: !Ref HostedZoneId
        Api: !GetAtt ApiGatewayStack.Outputs.Api
        V1Stage: !GetAtt ApiGatewayStack.Outputs.V1Stage
      TemplateURL: serve/adapter/lambda_function/stack-api-gateway-domain.yml

  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-${TableName}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  HttpLambdaDynamoPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${AWS::StackName}-HttpLambdaDynamoPolicy'
      Description: Managed policy for the Lambda function
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:Query
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource:
              - !GetAtt DynamoTable.Arn

      # Define the role here, rather than the managed policy on the role, to avoid a circular dependency
      Roles:
        - !GetAtt HttpLambdaStack.Outputs.HttpLambdaExecutionRoleFriendlyName
